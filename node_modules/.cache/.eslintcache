[{"/Users/amine/Documents/Practices/PollApp/client/my-app/src/index.tsx":"1","/Users/amine/Documents/Practices/PollApp/client/my-app/src/reportWebVitals.ts":"2","/Users/amine/Documents/Practices/PollApp/client/my-app/src/App.tsx":"3","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/Header/Header.tsx":"4","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/PollResult/PollResult.tsx":"5","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/PollForm/PollForm.tsx":"6","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/Poll/Poll.tsx":"7","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/TextInput/TextInput.tsx":"8","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/TextInputWithButton/TextInputWithButton.tsx":"9","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/LabelWithButton/LabelWithButton.tsx":"10","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/Label/Label.tsx":"11","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/Button/Button.tsx":"12","/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/OptionList/OptionList.tsx":"13","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/index.tsx":"14","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/reportWebVitals.ts":"15","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/App.tsx":"16","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/Header/Header.tsx":"17","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/Poll/Poll.tsx":"18","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/PollResult/PollResult.tsx":"19","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/PollForm/PollForm.tsx":"20","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/LabelWithButton/LabelWithButton.tsx":"21","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/Button/Button.tsx":"22","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/OptionList/OptionList.tsx":"23","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/Label/Label.tsx":"24","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/TextInput/TextInput.tsx":"25","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/TextInputWithButton/TextInputWithButton.tsx":"26","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Store.tsx":"27","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/RootReducer.tsx":"28","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Polls/pollReducer.tsx":"29","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Polls/pollTypes.tsx":"30","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Polls/pollActions.tsx":"31","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/Empty/Empty.tsx":"32","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/hooks/useSocket.tsx":"33","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/DropDown/DropDown.tsx":"34"},{"size":532,"mtime":1664292559832,"results":"35","hashOfConfig":"36"},{"size":425,"mtime":1664291367519,"results":"37","hashOfConfig":"36"},{"size":2001,"mtime":1664352995382,"results":"38","hashOfConfig":"36"},{"size":234,"mtime":1664298502527,"results":"39","hashOfConfig":"36"},{"size":1539,"mtime":1664358842088,"results":"40","hashOfConfig":"36"},{"size":1950,"mtime":1664352788254,"results":"41","hashOfConfig":"36"},{"size":1019,"mtime":1664353811948,"results":"42","hashOfConfig":"36"},{"size":398,"mtime":1664307175183,"results":"43","hashOfConfig":"36"},{"size":261,"mtime":1664306625424,"results":"44","hashOfConfig":"36"},{"size":315,"mtime":1664311048258,"results":"45","hashOfConfig":"36"},{"size":197,"mtime":1664310053257,"results":"46","hashOfConfig":"36"},{"size":242,"mtime":1664311651472,"results":"47","hashOfConfig":"36"},{"size":476,"mtime":1664354230138,"results":"48","hashOfConfig":"36"},{"size":658,"mtime":1664449172000,"results":"49","hashOfConfig":"50"},{"size":425,"mtime":1664291367000,"results":"51","hashOfConfig":"50"},{"size":1857,"mtime":1664560417000,"results":"52","hashOfConfig":"50"},{"size":813,"mtime":1664547516000,"results":"53","hashOfConfig":"50"},{"size":2078,"mtime":1664548403000,"results":"54","hashOfConfig":"50"},{"size":4065,"mtime":1664552477000,"results":"55","hashOfConfig":"50"},{"size":4724,"mtime":1664536889000,"results":"56","hashOfConfig":"50"},{"size":315,"mtime":1664311048000,"results":"57","hashOfConfig":"50"},{"size":345,"mtime":1664480289000,"results":"58","hashOfConfig":"50"},{"size":538,"mtime":1664467124000,"results":"59","hashOfConfig":"50"},{"size":197,"mtime":1664310053000,"results":"60","hashOfConfig":"50"},{"size":1058,"mtime":1664531197000,"results":"61","hashOfConfig":"50"},{"size":261,"mtime":1664306625000,"results":"62","hashOfConfig":"50"},{"size":503,"mtime":1664469359000,"results":"63","hashOfConfig":"50"},{"size":178,"mtime":1664446900000,"results":"64","hashOfConfig":"50"},{"size":4544,"mtime":1664550877000,"results":"65","hashOfConfig":"50"},{"size":325,"mtime":1664546196000,"results":"66","hashOfConfig":"50"},{"size":1174,"mtime":1664546255000,"results":"67","hashOfConfig":"50"},{"size":249,"mtime":1664472458000,"results":"68","hashOfConfig":"50"},{"size":250,"mtime":1664618131000,"results":"69","hashOfConfig":"50"},{"size":387,"mtime":1664547437000,"results":"70","hashOfConfig":"50"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8xx103",{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},"1371u4m",{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"117","messages":"118","suppressedMessages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"113"},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"125"},{"filePath":"126","messages":"127","suppressedMessages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"125"},{"filePath":"130","messages":"131","suppressedMessages":"132","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"133","usedDeprecatedRules":"125"},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137","usedDeprecatedRules":"125"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"113"},{"filePath":"154","messages":"155","suppressedMessages":"156","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"157","messages":"158","suppressedMessages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"163","messages":"164","suppressedMessages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"125"},{"filePath":"167","messages":"168","suppressedMessages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"170","messages":"171","suppressedMessages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"173","messages":"174","suppressedMessages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"179","messages":"180","suppressedMessages":"181","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"125"},"/Users/amine/Documents/Practices/PollApp/client/my-app/src/index.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/reportWebVitals.ts",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/App.tsx",["182","183","184"],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/Header/Header.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/PollResult/PollResult.tsx",["185"],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/PollForm/PollForm.tsx",["186"],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/Poll/Poll.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/TextInput/TextInput.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/TextInputWithButton/TextInputWithButton.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/LabelWithButton/LabelWithButton.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/Label/Label.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/Button/Button.tsx",[],[],"/Users/amine/Documents/Practices/PollApp/client/my-app/src/components/FormInput/OptionList/OptionList.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/index.tsx",[],[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/reportWebVitals.ts",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/App.tsx",["187","188","189","190","191","192","193","194"],[],"import React, { useEffect, useMemo, useState} from 'react';\nimport Header from './components/Header/Header';\nimport PollForm from './components/PollForm/PollForm';\nimport Poll from './components/Poll/Poll';\nimport PollResult from './components/PollResult/PollResult';\n\nimport './App.css';\n\nimport { REFRESH_POLL_DATA_ACTION } from './store/Polls/pollActions';\nimport { useDispatch } from 'react-redux';\nimport useSocket from './hooks/useSocket';\nimport { useSelector } from 'react-redux';\nimport { RootState } from './store/Store';\n\nfunction App() {\n\n  // state\n  const {connected_role} =  useSelector((state:RootState)=>(state.Poll));\n\n  // socket\n  const {socket} = useSocket();\n  // dispatch\n  const dispatch = useDispatch();\n\n  // handle socket\n  useEffect(()=>{\n    socket.on(\"new_result\",(data)=>{\n      dispatch(REFRESH_POLL_DATA_ACTION(data));\n    });\n  },[socket]);\n\n  return (\n      <div className=\"App\">\n        <div className='container'>\n            <Header title=\"Sir Vote-a-lot\" />\n            <section className='Main'>\n            { (connected_role == \"Owner\") &&  <PollForm/> }\n            { (connected_role == \"Respondent\") &&  <Poll/>  }\n            { (connected_role == \"Owner\" || connected_role == \"User\" || connected_role == \"Respondent\") &&  <PollResult/> }\n            </section>\n        </div>\n      </div>\n  );\n\n}\n\nexport default App;\n\n/*\n\n  // send message\n  const sendMessage = () =>{\n    socket.emit(\"vote\",{\"message\":message});\n    setMessage(\"\");\n  }\n\n  // Handle Socket on mount\n  useEffect(()=>{\n    socket.on(\"new_result\",(data)=>{\n      setNewMessage(data.message)\n    });\n  },[]); //socket\n\n      <h1>Hello world</h1>\n      <input value={message} placeholder='Message' onChange={(event)=>{\n        setMessage(event.target.value)\n      }}/>\n      <button onClick={sendMessage}>Send</button>\n\n      <p>{newMessage}</p>\n\n*/","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/Header/Header.tsx",["195","196"],[],"import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { SWITCH_ROLE_ACTION } from '../../store/Polls/pollActions';\nimport { RootState } from '../../store/Store';\nimport DropDown from '../FormInput/DropDown/DropDown';\nimport './Header.css';\n\ninterface IHeader{\n  title:string\n}\n\nfunction Header(props:IHeader) {\n\n  // State\n  const [role,setRole] = useState<string>(\"\");\n\n  // Dispatch\n  const dispatch = useDispatch();\n\n  //handle dropdown\n  const handleDropDownChange = (event: React.ChangeEvent<HTMLSelectElement>) =>{\n    setRole(event.target.value);\n    dispatch(SWITCH_ROLE_ACTION(event.target.value));\n  }\n\n  return (\n    <div className='Header'>\n        <h1>{props.title}</h1>\n        <DropDown onChange={handleDropDownChange}/>\n    </div>\n  )\n}\n\nexport default Header;",[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/Poll/Poll.tsx",["197"],[],"import React, { useEffect, useState } from 'react';\nimport Button from '../FormInput/Button/Button';\nimport LabelWithButton from '../FormInput/LabelWithButton/LabelWithButton';\nimport OptionList from '../FormInput/OptionList/OptionList';\n\nimport { IPollQuestionOptions } from '../../@types/poll.d';\n\nimport { RootState } from '../../store/Store';\nimport { useSelector , useDispatch } from 'react-redux';\n\nimport { VOTING_ACTION } from \"../../store/Polls/pollActions\";\nimport Empty from '../FormInput/Empty/Empty';\n\ninterface IProps{}\n\nfunction Poll(props:IProps) {\n\n  const {poll_question_options, poll_main_question} = useSelector((state:RootState) => (state.Poll));\n\n  // dispatch\n  const dispatch = useDispatch();\n\n  useEffect(()=>{\n    \n  },[poll_main_question]);\n\n  const [selectedAnswer,setSelectedAnswer] = useState<string>(\"\");\n\n  return (\n    <section className='Section'>\n\n      {\n          (poll_question_options.length < 2 )  ?\n              <div className='SubSection'>\n                <Empty imgSrc={\"./icons/emptyPoll.png\"} /> \n              </div>\n          : \n\n          <div className='SubSection'>\n\n            <h1>{poll_main_question}</h1>\n\n            <div className='PollQuestionContainer'>\n\n              <div className='PollQuestion'>\n                  {\n                    poll_question_options.map((poll:IPollQuestionOptions,ind:IPollQuestionOptions[\"id\"])=>{\n                      return( poll.answer!= \"\" && <OptionList onClick={()=>{ setSelectedAnswer(String(poll.id))}} \n                        key={poll.id} id={\"Radio\"+ind} name=\"option\" value={poll.answer} type=\"Radio\"/>\n                      )\n                    })\n                  }\n              </div>\n\n            </div>\n\n          </div>\n\n      }\n      {\n          poll_question_options.length >= 2  && <LabelWithButton style={{justifyContent:\"flex-end\"}}>\n                        <Button onClick={()=>{dispatch(VOTING_ACTION(selectedAnswer))}} style={{minWidth:\"80px\",height:\"40px\"}} text=\"Vote\"/>\n                </LabelWithButton>\n      }\n    </section>\n  )\n}\n\nexport default Poll;","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/PollResult/PollResult.tsx",["198","199"],[],"import React ,{ useState , useEffect } from 'react';\nimport Label from '../FormInput/Label/Label';\nimport LabelWithButton from '../FormInput/LabelWithButton/LabelWithButton';\nimport { Bar } from 'react-chartjs-2';\nimport ChartDataLabels from 'chartjs-plugin-datalabels';\n\nimport { useSelector} from 'react-redux';\n\n\nimport { RootState } from '../../store/Store';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Tooltip\n} from 'chart.js';\nimport Empty from '../FormInput/Empty/Empty';\nimport { IPollQuestionOptions } from '../../@types/poll.d';\n\ninterface IProps{}\n\n// Register ChartJs\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  BarElement,\n  Tooltip,\n  ChartDataLabels\n);\n\nconst PollResult = (props:IProps) => {\n\n  // useSelectot\n  const {poll_question_options, poll_main_question, connected_role} = useSelector((state:RootState) => (state.Poll));\n\n  useEffect(()=>{\n  },[]);\n\n  // generate label array\n  const dynamicLabels = () =>{\n    return(poll_question_options.map((poll:IPollQuestionOptions,ind:IPollQuestionOptions[\"id\"])=>{\n        return poll.answer;\n    }));\n  }\n\n  // generate vote rates array\n  const dynamicVotes = () =>{\n    return(poll_question_options.map((poll:IPollQuestionOptions,ind:IPollQuestionOptions[\"id\"])=>{\n        return poll.votes;\n    }));\n  }\n\n  // generate random colors\n  const colorPicker = () =>{\n    const colorsPalette = ['#FF6633', '#FFB399', '#FF33FF', '#FFFF99', '#00B3E6', \n    '#E6B333', '#3366E6', '#999966', '#99FF99', '#B34D4D',\n    '#80B300', '#809900', '#E6B3B3', '#6680B3', '#66991A', \n    '#FF99E6', '#CCFF1A', '#FF1A66', '#E6331A', '#33FFCC',\n    '#66994D', '#B366CC', '#4D8000', '#B33300', '#CC80CC', \n    '#66664D', '#991AFF', '#E666FF', '#4DB3FF', '#1AB399',\n    '#E666B3', '#33991A', '#CC9999', '#B3B31A', '#00E680', \n    '#4D8066', '#809980', '#E6FF80', '#1AFF33', '#999933',\n    '#FF3380', '#CCCC00', '#66E64D', '#4D80CC', '#9900B3', \n    '#E64D66', '#4DB380', '#FF4D4D', '#99E6E6', '#6666FF'];\n    return(poll_question_options.map((poll:IPollQuestionOptions,ind:number)=>{\n        return colorsPalette[ind];\n    }));\n  }\n\n  // generate vote rates array\n  const totalVotes = () =>{\n    return(poll_question_options.reduce((acc:number,poll:IPollQuestionOptions)=>{\n        return acc + poll.votes\n    },0));\n  }\n\n  // ChartJs display options\n  const options = {\n    responsive: true,\n    plugins: {\n      legend: {\n        position: 'top' as const,\n      },\n      title: {\n        display: true,\n        text: 'Chart.js Bar Chart',\n      },\n    },\n    scales: {\n        y: {\n          grace: '5%'\n        }\n    }\n  };\n\n  // ChartJs display labels\n  const labels = dynamicLabels();\n  \n  // ChartJs data\n  const data = {\n    labels,\n    datasets: [\n      {\n        data: dynamicVotes(),\n        backgroundColor: colorPicker() ,\n        datalabels: {\n          align: 'end' as const,\n          anchor: 'end' as const,\n          formatter: function(value:string, ctx:object) {\n              return value;\n          },\n          color:'black',\n          font:{\n              size: 14,\n              weight:500\n          }\n        }\n      }\n    ]\n  };\n\n  return (\n    <section className='Section' style={(connected_role == \"User\") ? {maxWidth:\"600px\",margin:\"0px auto\"} : {}}>\n      { \n          poll_question_options.length < 2 ?\n          <div className='SubSection SubSectionCenter'>\n                <Empty imgSrc={\"./icons/emptyChart.png\"} /> \n              </div>\n            : \n      \n          <div className='SubSection SubSectionCenter'>\n\n            <h1>{poll_main_question}</h1>\n\n            <div className='PollQuestionContainer'>\n\n              <div className='PollQuestion'>\n                <Bar options={options} data={data} />\n              </div>\n\n            </div>\n\n          </div>\n      }\n      {\n          poll_question_options.length >= 2  &&  <LabelWithButton style={{}}>\n                <Label style={{marginRight:\"15px\"}} content={`Total votes : ${totalVotes()}`}/>\n          </LabelWithButton>\n      }\n    </section>\n  )\n}\n\nexport default PollResult","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/PollForm/PollForm.tsx",["200","201"],[],"import React, { useEffect, useState  } from 'react';\nimport Button from '../FormInput/Button/Button';\nimport Label from '../FormInput/Label/Label';\nimport LabelWithButton from '../FormInput/LabelWithButton/LabelWithButton';\nimport TextInput from '../FormInput/TextInput/TextInput';\nimport TextInputWithButton from '../FormInput/TextInputWithButton/TextInputWithButton';\nimport \"./PollForm.css\";\n\nimport { useSelector , useDispatch , shallowEqual} from 'react-redux';\n\nimport { IPollQuestionOptions} from '../../@types/poll.d';\nimport { RootState } from '../../store/Store';\n\nimport { ADD_POLL_ACTION , UPDATE_QUESTION_ACTION , REMOVE_AN_ANSWER_ACTION , RESET_POLL_ACTION, UPDATE_SINGLE_ANSWER_ACTION  } from \"../../store/Polls/pollActions\";\n\ninterface IProps{\n  children?: React.ReactNode,\n}\n\nfunction PollForm( props :IProps) {\n\n  // Dipatcher \n  const dispatch = useDispatch();\n\n  // use Selector\n  const {poll_main_question,poll_question_options} = useSelector((state:RootState) =>(state.Poll));\n\n  // Initiate states\n  const [newAnswer,setNewAnswer] = useState<string>(\"\");\n\n  // Initiate states\n  const handleAnswerChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setNewAnswer(event.target.value);\n  };\n\n  // handle question change\n  const handleQuestionChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(UPDATE_QUESTION_ACTION(event.target.value));\n  };\n\n  // handle new answer \n  const handleSingleAnswerChange = (event: React.ChangeEvent<HTMLInputElement> , id : string) => {\n    console.log(event.target.value,id);\n    dispatch(UPDATE_SINGLE_ANSWER_ACTION(id,event.target.value));\n  };\n\n  useEffect(()=>{ \n  },[]);\n\n  // handle click add\n  const addNewAnswer = () =>{\n\n    if(newAnswer != \"\"){\n      dispatch(ADD_POLL_ACTION(newAnswer));\n      setNewAnswer(\"\");\n    }\n  }\n\n  //removeAnswer\n  const removeAnswer = (id:string)=>{\n      if(poll_question_options.length > 2){\n        dispatch(REMOVE_AN_ANSWER_ACTION(id));\n      }else{\n          // must have 2 options at least\n      }\n  }\n\n  //resetPoll\n  const resetPoll = ()=>{\n    dispatch(RESET_POLL_ACTION());\n  }\n\n  return(\n\n    <section className='Section'>\n\n      <div className='SubSection'>\n\n        <div className='PollQuestionContainer'>\n\n          <TextInput style={{width:\"calc(100% - 99px)\",marginRight:\"15px\"}} \n                     name=\"poll_question\" \n                     placeholder=\"Type your question\"\n                     value={String(poll_main_question)}\n                     onChange={(event)=>{handleQuestionChange(event)}}\n                     maxlength={80}\n          />\n\n          <div className='PollQuestion'>\n              {\n                poll_question_options.map((poll:IPollQuestionOptions,ind:IPollQuestionOptions[\"id\"])=>{\n                  return(\n                    <TextInputWithButton key={poll.id}>\n                      <TextInput style={{width:\"calc(100% - 99px)\",marginRight:\"15px\"}} \n                                 key={poll.id} \n                                 name=\"poll_question\"\n                                 placeholder=\"Type an answer\"\n                                 onChange={(event) => {handleSingleAnswerChange(event,String(poll.id))}}\n                                 defaultValue={String(poll.answer)}\n                                 maxlength={80}\n                      />\n                      <Button disabled={poll_question_options.length <=2 ? true : false} \n                              onClick={()=>{removeAnswer(String(poll.id))}} \n                              style={{\"width\":\"60px\",height:\"40px\"}} \n                              text=\"X\"/>\n                    </TextInputWithButton>\n                  )\n                })\n              }\n\n          </div>\n\n          {\n                 poll_question_options.length < 10 && <TextInputWithButton>\n                      <TextInput style={{width:\"calc(100% - 99px)\",marginRight:\"15px\"}} \n                                  onChange={handleAnswerChange}\n                                  name=\"poll_question\" \n                                  placeholder=\"Type an answer\"\n                                  value={newAnswer}\n                                  maxlength={80}\n                      />\n                      <Button onClick={addNewAnswer} style={{\"width\":\"60px\",height:\"40px\"}} text=\"Add\"/>\n                  </TextInputWithButton>\n          }\n\n        </div>\n\n      \n      </div>\n\n      <LabelWithButton>\n             <Label style={{marginRight:\"15px\"}} content={`${poll_question_options.length}/10 Possible answers`}/>\n              <Button onClick={resetPoll} style={{minWidth:\"80px\",height:\"40px\"}} text=\"Reset\"/>\n      </LabelWithButton>\n\n    </section>\n  )\n}\n\nexport default PollForm;","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/LabelWithButton/LabelWithButton.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/Button/Button.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/OptionList/OptionList.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/Label/Label.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/TextInput/TextInput.tsx",["202","203"],[],"import React, { useEffect, useState ,useRef } from 'react';\nimport \"./TextInput.css\";\n\ninterface IProps{\n    value?:string,\n    name:string,\n    placeholder:string,\n    style?:{},\n    defaultValue?:string | number,\n    onChange:(event:React.ChangeEvent<HTMLInputElement>) => void,\n    maxlength?:number\n}\n\nfunction TextInput({value,name,placeholder,style,onChange,defaultValue,maxlength} :IProps) {\n\n  const input = useRef<HTMLInputElement>(null);\n\n  const [disabled,setDisabled] = useState(false);\n\n  useEffect(()=>{\n\n    if(String(value).length > Number(maxlength)){\n      setDisabled(true);\n      //input.current?.setAttribute(\"disabled\",\"\"); // uncomment to disable the input completely\n    }   \n\n  },[value,onChange]);\n\n  return (\n    <input \n        className='TextInput'\n        value={value}\n        name={name}\n        placeholder={placeholder}\n        style={style}\n        onChange={onChange}\n        defaultValue={defaultValue}\n        maxLength={maxlength}\n        //disabled={disabled}\n        ref={input}\n    />\n  )\n}\n\nexport default TextInput","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/TextInputWithButton/TextInputWithButton.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Store.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/RootReducer.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Polls/pollReducer.tsx",["204","205","206"],[],"import { IPollQuestionOptions } from \"../../@types/poll.d\";\nimport PollTypes from \"./pollTypes\";\nimport { v4 as uuidv4 } from 'uuid';\nimport useSocket from \"../../hooks/useSocket\";\n\ntype TPayload = {\n    id:string ,\n    content:string\n}\n\ninterface IAction{\n    type:string,\n    payload: TPayload | string | number | any\n}\n\nconst initialState = {\n    \"connected_role\":\"Owner\", //\"Owner\", \"User\" , \"Respondent\"\n    \"poll_main_question\":\"What is the value of π ?\",\n    \"poll_question_options\":[\n        {\n            id:1,\n            answer:\"3.14\",\n            votes:10\n        },\n        {\n            id:2,\n            answer:\"3.15\",\n            votes:3\n        },\n        {\n            id:3,\n            answer:\"3.16\",\n            votes:2\n        },\n    ]\n}\n\nconst resetState =  {\n    \"connected_role\":\"Owner\", //\"Owner\", \"User\" , \"Respondent\"\n    \"poll_main_question\":\"\",\n    \"poll_question_options\":[]\n}\n\nconst PollReducer = (state=initialState,action:IAction ) =>{\n\n    // use socket\n    const {socket} = useSocket();\n\n    switch(action.type){\n\n        case PollTypes.REFRESH_POLL_DATA :{\n\n            // action.payload.data\n\n            const next_state = Object.assign({...state, \n                poll_question_options:action.payload.data.poll_question_options,\n                poll_main_question:action.payload.data.poll_main_question\n            });\n\n\n            return next_state;\n        }\n\n        case PollTypes.ADD_POLL :{\n\n            const next_state = Object.assign({...state, poll_question_options:[...state.poll_question_options,{\n                id:uuidv4(),\n                answer:action.payload,\n                votes:0\n            }]});\n\n            // emit new result;\n            socket.emit(\"refresh\",{data:next_state});\n\n            return next_state;\n           \n        }\n\n        case PollTypes.RESET_POLL :{\n            \n            const next_state =  resetState;\n\n            // emit new result;\n            socket.emit(\"refresh\",{data:next_state});\n\n            return next_state;\n        }\n\n        case PollTypes.UPDATE_QUESTION :{\n\n            const next_state = Object.assign({...state, poll_main_question:action.payload});\n\n            // emit new result;\n            socket.emit(\"refresh\",{data:next_state});\n\n            return next_state;\n        }\n\n        case PollTypes.REMOVE_AN_ANSWER :{\n\n            const prev_state = Object.assign({...state});\n\n            const new_poll_question_options = prev_state.poll_question_options.filter((poll:IPollQuestionOptions)=>{\n                return poll.id != action.payload\n            });\n\n            const next_state = Object.assign({...state, poll_question_options:new_poll_question_options});\n\n            // emit new result;\n            socket.emit(\"refresh\",{data:next_state});\n\n            return next_state;\n\n        }\n\n        case PollTypes.UPDATE_SINGLE_ANSWER :{\n\n            console.log(\"store =>\",action.payload.id,action.payload.answer);\n\n            const prev_state = Object.assign({...state});\n\n            const new_poll_question_options = prev_state.poll_question_options.map((poll:IPollQuestionOptions)=>{\n                if(poll.id == action.payload.id){\n                   return Object.assign(poll,{answer:action.payload.answer});\n                 }else{\n                    return poll\n                 } \n            });\n\n            const next_state =  Object.assign({...state, poll_question_options:new_poll_question_options});\n\n            // emit new result;\n            socket.emit(\"refresh\",{data:next_state});\n\n            return next_state;\n\n        }\n        \n        case PollTypes.SWITCH_ROLE :{\n\n            const next_state =  Object.assign({...state, connected_role:action.payload});\n\n            return next_state;\n\n        }\n\n        case PollTypes.VOTING :{\n\n            const prev_state = Object.assign({...state});\n\n            const new_poll_question_options = prev_state.poll_question_options.map((poll:IPollQuestionOptions)=>{\n                if(poll.id == action.payload){\n                   return Object.assign(poll, {votes:(poll.votes + 1)});\n                 }else{\n                    return poll\n                 } \n            });\n\n            // emit new result;\n            const next_state = Object.assign({...state, poll_question_options:new_poll_question_options});\n\n            // emit new result;\n            socket.emit(\"refresh\",{data:next_state});\n\n            return next_state;\n\n        }\n    \n        default:{\n            return state;\n        }\n\n    }\n\n}\n\nexport default PollReducer;\n","/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Polls/pollTypes.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Polls/pollActions.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/Empty/Empty.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/hooks/useSocket.tsx",[],[],"/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/components/FormInput/DropDown/DropDown.tsx",[],[],{"ruleId":"207","severity":1,"message":"208","line":21,"column":10,"nodeType":"209","messageId":"210","endLine":21,"endColumn":20},{"ruleId":"207","severity":1,"message":"211","line":24,"column":9,"nodeType":"209","messageId":"210","endLine":24,"endColumn":20},{"ruleId":"212","severity":1,"message":"213","line":34,"column":5,"nodeType":"214","endLine":34,"endColumn":13,"suggestions":"215"},{"ruleId":"207","severity":1,"message":"216","line":4,"column":10,"nodeType":"209","messageId":"210","endLine":4,"endColumn":18},{"ruleId":"207","severity":1,"message":"217","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":27},{"ruleId":"207","severity":1,"message":"218","line":1,"column":28,"nodeType":"209","messageId":"210","endLine":1,"endColumn":35},{"ruleId":"207","severity":1,"message":"219","line":1,"column":37,"nodeType":"209","messageId":"210","endLine":1,"endColumn":45},{"ruleId":"212","severity":1,"message":"220","line":30,"column":5,"nodeType":"214","endLine":30,"endColumn":13,"suggestions":"221"},{"ruleId":"222","severity":1,"message":"223","line":37,"column":31,"nodeType":"224","messageId":"225","endLine":37,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":38,"column":31,"nodeType":"224","messageId":"225","endLine":38,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":39,"column":31,"nodeType":"224","messageId":"225","endLine":39,"endColumn":33},{"ruleId":"222","severity":1,"message":"223","line":39,"column":60,"nodeType":"224","messageId":"225","endLine":39,"endColumn":62},{"ruleId":"222","severity":1,"message":"223","line":39,"column":88,"nodeType":"224","messageId":"225","endLine":39,"endColumn":90},{"ruleId":"207","severity":1,"message":"226","line":4,"column":10,"nodeType":"209","messageId":"210","endLine":4,"endColumn":19},{"ruleId":"207","severity":1,"message":"227","line":15,"column":10,"nodeType":"209","messageId":"210","endLine":15,"endColumn":14},{"ruleId":"222","severity":1,"message":"228","line":48,"column":42,"nodeType":"224","messageId":"225","endLine":48,"endColumn":44},{"ruleId":"207","severity":1,"message":"219","line":1,"column":17,"nodeType":"209","messageId":"210","endLine":1,"endColumn":25},{"ruleId":"222","severity":1,"message":"223","line":125,"column":57,"nodeType":"224","messageId":"225","endLine":125,"endColumn":59},{"ruleId":"207","severity":1,"message":"229","line":9,"column":38,"nodeType":"209","messageId":"210","endLine":9,"endColumn":50},{"ruleId":"222","severity":1,"message":"228","line":53,"column":18,"nodeType":"224","messageId":"225","endLine":53,"endColumn":20},{"ruleId":"207","severity":1,"message":"230","line":18,"column":10,"nodeType":"209","messageId":"210","endLine":18,"endColumn":18},{"ruleId":"212","severity":1,"message":"231","line":27,"column":5,"nodeType":"214","endLine":27,"endColumn":21,"suggestions":"232"},{"ruleId":"222","severity":1,"message":"228","line":104,"column":32,"nodeType":"224","messageId":"225","endLine":104,"endColumn":34},{"ruleId":"222","severity":1,"message":"223","line":123,"column":28,"nodeType":"224","messageId":"225","endLine":123,"endColumn":30},{"ruleId":"222","severity":1,"message":"223","line":152,"column":28,"nodeType":"224","messageId":"225","endLine":152,"endColumn":30},"@typescript-eslint/no-unused-vars","'newMessage' is assigned a value but never used.","Identifier","unusedVar","'sendMessage' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'socket'. Either exclude it or remove the dependency array. Outer scope values like 'socket' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["233"],"'Doughnut' is defined but never used.","'useContext' is defined but never used.","'useMemo' is defined but never used.","'useState' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["234"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'RootState' is defined but never used.","'role' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'shallowEqual' is defined but never used.","'disabled' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'maxlength'. Either include it or remove the dependency array.",["235"],{"desc":"236","fix":"237"},{"desc":"238","fix":"239"},{"desc":"240","fix":"241"},"Update the dependencies array to be: []",{"range":"242","text":"243"},"Update the dependencies array to be: [dispatch, socket]",{"range":"244","text":"245"},"Update the dependencies array to be: [value, onChange, maxlength]",{"range":"246","text":"247"},[867,875],"[]",[864,872],"[dispatch, socket]",[705,721],"[value, onChange, maxlength]"]