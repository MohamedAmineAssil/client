{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport RootReducer from './RootReducer';\nconst Store = createStore(RootReducer, composeWithDevTools(applyMiddleware(thunk)));\n_c = Store;\nexport default Store; // Infer the `RootState` and `AppDispatch` types from the store itself\n\nvar _c;\n\n$RefreshReg$(_c, \"Store\");","map":{"version":3,"names":["createStore","applyMiddleware","composeWithDevTools","thunk","RootReducer","Store"],"sources":["/Users/amine/Documents/Practices/Sir_vote_a_lot/PollApp/client/my-app/src/store/Store.tsx"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport RootReducer from './RootReducer';\n\nconst Store = createStore(\n    RootReducer, \n    composeWithDevTools(\n        applyMiddleware(thunk)\n    )\n);\n\nexport default Store;\n\n// Infer the `RootState` and `AppDispatch` types from the store itself\nexport type RootState = ReturnType<typeof Store.getState>\nexport type AppDispatch = typeof Store.dispatch"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AAEA,MAAMC,KAAK,GAAGL,WAAW,CACrBI,WADqB,EAErBF,mBAAmB,CACfD,eAAe,CAACE,KAAD,CADA,CAFE,CAAzB;KAAME,K;AAON,eAAeA,KAAf,C,CAEA"},"metadata":{},"sourceType":"module"}